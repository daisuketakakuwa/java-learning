# DB
spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5433}/${DB_NAME:postgres}
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.hikari.auto-commit=false
spring.jpa.show-sql=true

# HikariCP
# やはり公式ドキュメントが一番分かりやすい。

# Poolするコネクションの数 Default: 10
spring.datasource.hikari.maximum-pool-size=2

# Poolしてるコネクションが全て使用中で、いずれかが解放されるのを待つ時間
# X秒待機しても使えなかった場合は「HikariPool-1 - Connection is not available, request timed out」となる。
# Default: 30000(30秒)
spring.datasource.hikari.connection-timeout=1000

# ずっとIdle状態でPoolすることができるコネクションの数。
# 例)2コネクションMaxPoolで、Minimumを1とする場合、起動時には1つだけPoolする。
#    んで、実際にクエリ発行されたときに必要になったら2つめのコネクション生成＆Poolする。
# Default: same as maximumPoolSize
spring.datasource.hikari.minimum-idle=1

# ConnectionがIdle状態となるマックスの時間(使われすぎなかったらPoolする必要ないもんね)
# maximumPoolSize > minimumIdle のときに設定が有効となる。
# The minimum allowed value is 10000ms (10 seconds). Default: 600000 (10 minutes)
spring.datasource.hikari.idle-timeout=10000

# Poolするコネクションの生存期間。
# 30秒にしたらいかなる状況でもコネクションは一旦切れる。
# そしてまたminimumIdleの数だけコネクションを生成してPoolする。
# The minimum allowed value is 30000ms (30 seconds). Default: 1800000 (30 minutes)
spring.datasource.hikari.max-lifetime=60000

# Idle状態のコネクションに対してPingして生存確認する頻度。
# how frequently HikariCP will attempt to keep a connection alive, in order to prevent it from being timed out by the database or network infrastructure.
# This value must be less than the maxLifetime value.
# A "keepalive" will only occur on an idle connection.
# こんな感じのログを出す HikariPool-2 - keepalive: connection org.postgresql.jdbc.PgConnection@66d42f05 is alive
# The minimum allowed value is 30000ms (30 seconds), but a value in the range of minutes is most desirable. Default: 0 (disabled)
spring.datasource.hikari.keepalive-time=30000

# Logging
# 定期的にPoolしてるConnection情報をLoggingしてくれる。
# HikariPool-1 - Pool stats (total=10, active=0, idle=10, waiting=0)
logging.level.com.zaxxer.hikari=debug

# Flyway
#  > when spring.flyway.enabled is true, FlywayAutoConfiguration works when spring-boot app starts.
spring.flyway.enabled=true
spring.flyway.user=postgres
spring.flyway.password=postgres
spring.flyway.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5433}/${DB_NAME:postgres}
spring.flyway.locations=${FLYWAY_LOCATIONS:classpath:/common/db/migration,classpath:/test/db/migration}
spring.flyway.validate-on-migrate=false
